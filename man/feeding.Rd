% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_eventsDataQueries.R
\name{feeding}
\alias{feeding}
\title{Calculate feeding rates}
\usage{
feeding(x, timeScale = 60, includeNA = FALSE, residentOnly = TRUE,
  from = NA, to = NA, basedOn = c("out_", "in_")[1])
}
\arguments{
\item{x}{A data.table as provided by queryResidents}

\item{timeScale}{The time for which to calculate feeding rates in minutes. Defaults to 60 (= hourly feeding rates)}

\item{includeNA}{Logical. Should NA transponder readings be included? Defaults to FALSE.}

\item{residentOnly}{Logical. Should only the residents of that nest be considered (i.e. for feeding rates)? Defaults to TRUE.}

\item{from}{timepoint from which to add lines without activity}

\item{to}{timepoint to which to add lines without activity.}

\item{basedOn}{Can be either "in_" or "out_". Should the results be based on the in_ or on the out_ column? For many purposes,
including feeding rates, the "out_" column should be used, as a visit to the front of the nestbox (without entering) is
placed in the "in_" column. For some purposes (i.e. maximal approaches to the nestbox), the "in_"-column may be preferred.}
}
\value{
A data.table.
}
\description{
This function calculates feeding rates based on a dataset provided by the functions queryEvents and queryResidents.
}
\details{
timeScale should always fit into 24 hour cycles. Other values will work, but the resulting slots will not coincide with midnight.
}
\note{
If residency data is not available, a column called "resident" with all values equalling "0" should be created manually.
}
\examples{
#establish connection
con = dbcon(user = "YOUR_USER_NAME", host = getOption("host") )

#Run function for one nestbox only
x = queryEvents(con = con, box = 26, from = "2014-05-17", to = "2014-05-18", includeFIELD = TRUE)
x = queryResidents(con = con, x = x)
x = feeding(x = x, timeScale = 10, from = '2014-05-17', to = '2014-05-18')

#Run function for multiple nestboxes
input = data.table(box = c(26, 117, 120, 233, 204, 129, 247), from = "2014-05-17", to = "2014-05-18")

require(data.table)

output = list()
bar  = txtProgressBar(min = 1, max = nrow(input), initial = 1, style = 3, width = floor(getOption("width")/2)  )
for(i in 1 : nrow(input)) {
 setTxtProgressBar(bar, i)
  x = queryEvents(con = con, box = input[i,box], from = input[i,from], to = input[i,to], includeFIELD = TRUE); if(nrow(x) == 0) next;
  x = queryResidents(con = con, x = x); if(nrow(x) == 0) next;
  x = feeding(x = x, timeScale = 10); if(nrow(x) == 0) next;
  x -> output[[length(output)+1]]
}
output = rbindlist(output)
closeCon(con)
}
\seealso{
\code{\link{queryEvents}}, \code{\link{queryResidents}}
}
\author{
LS
}
